// Generated from regex.g4 by ANTLR 4.9.2
// jshint ignore: start
//import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\u0012o\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003",
    "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007",
    "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0006\f:\n\f\r\f",
    "\u000e\f;\u0003\r\u0003\r\u0007\r@\n\r\f\r\u000e\rC\u000b\r\u0003\u000e",
    "\u0003\u000e\u0007\u000eG\n\u000e\f\u000e\u000e\u000eJ\u000b\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007",
    "\u000fR\n\u000f\f\u000f\u000e\u000fU\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010_\n\u0010\f\u0010\u000e\u0010b\u000b\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0006\u0011j",
    "\n\u0011\r\u0011\u000e\u0011k\u0003\u0011\u0003\u0011\u0005HS`\u0002",
    "\u0012\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f",
    "\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f\u001d",
    "\u0010\u001f\u0011!\u0012\u0003\u0002\u0006\u0003\u00022;\u0005\u0002",
    "C\\aac|\u0006\u00022;C\\aac|\u0005\u0002\u000b\f\u000f\u000f\"\"\u0002",
    "t\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002",
    "\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002",
    "\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002",
    "\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002",
    "\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002",
    "\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002",
    "\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002",
    "\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002",
    "\u0002\u0003#\u0003\u0002\u0002\u0002\u0005%\u0003\u0002\u0002\u0002",
    "\u0007\'\u0003\u0002\u0002\u0002\t)\u0003\u0002\u0002\u0002\u000b+\u0003",
    "\u0002\u0002\u0002\r-\u0003\u0002\u0002\u0002\u000f/\u0003\u0002\u0002",
    "\u0002\u00111\u0003\u0002\u0002\u0002\u00134\u0003\u0002\u0002\u0002",
    "\u00156\u0003\u0002\u0002\u0002\u00179\u0003\u0002\u0002\u0002\u0019",
    "=\u0003\u0002\u0002\u0002\u001bD\u0003\u0002\u0002\u0002\u001dM\u0003",
    "\u0002\u0002\u0002\u001fZ\u0003\u0002\u0002\u0002!i\u0003\u0002\u0002",
    "\u0002#$\u0007,\u0002\u0002$\u0004\u0003\u0002\u0002\u0002%&\u0007-",
    "\u0002\u0002&\u0006\u0003\u0002\u0002\u0002\'(\u0007A\u0002\u0002(\b",
    "\u0003\u0002\u0002\u0002)*\u0007}\u0002\u0002*\n\u0003\u0002\u0002\u0002",
    "+,\u0007<\u0002\u0002,\f\u0003\u0002\u0002\u0002-.\u0007\u007f\u0002",
    "\u0002.\u000e\u0003\u0002\u0002\u0002/0\u00070\u0002\u00020\u0010\u0003",
    "\u0002\u0002\u000212\u0007~\u0002\u000223\u0007~\u0002\u00023\u0012",
    "\u0003\u0002\u0002\u000245\u0007*\u0002\u00025\u0014\u0003\u0002\u0002",
    "\u000267\u0007+\u0002\u00027\u0016\u0003\u0002\u0002\u00028:\t\u0002",
    "\u0002\u000298\u0003\u0002\u0002\u0002:;\u0003\u0002\u0002\u0002;9\u0003",
    "\u0002\u0002\u0002;<\u0003\u0002\u0002\u0002<\u0018\u0003\u0002\u0002",
    "\u0002=A\t\u0003\u0002\u0002>@\t\u0004\u0002\u0002?>\u0003\u0002\u0002",
    "\u0002@C\u0003\u0002\u0002\u0002A?\u0003\u0002\u0002\u0002AB\u0003\u0002",
    "\u0002\u0002B\u001a\u0003\u0002\u0002\u0002CA\u0003\u0002\u0002\u0002",
    "DH\u0007~\u0002\u0002EG\u000b\u0002\u0002\u0002FE\u0003\u0002\u0002",
    "\u0002GJ\u0003\u0002\u0002\u0002HI\u0003\u0002\u0002\u0002HF\u0003\u0002",
    "\u0002\u0002IK\u0003\u0002\u0002\u0002JH\u0003\u0002\u0002\u0002KL\u0007",
    "~\u0002\u0002L\u001c\u0003\u0002\u0002\u0002MN\u00071\u0002\u0002NO",
    "\u00071\u0002\u0002OS\u0003\u0002\u0002\u0002PR\u000b\u0002\u0002\u0002",
    "QP\u0003\u0002\u0002\u0002RU\u0003\u0002\u0002\u0002ST\u0003\u0002\u0002",
    "\u0002SQ\u0003\u0002\u0002\u0002TV\u0003\u0002\u0002\u0002US\u0003\u0002",
    "\u0002\u0002VW\u0007\f\u0002\u0002WX\u0003\u0002\u0002\u0002XY\b\u000f",
    "\u0002\u0002Y\u001e\u0003\u0002\u0002\u0002Z[\u00071\u0002\u0002[\\",
    "\u0007,\u0002\u0002\\`\u0003\u0002\u0002\u0002]_\u000b\u0002\u0002\u0002",
    "^]\u0003\u0002\u0002\u0002_b\u0003\u0002\u0002\u0002`a\u0003\u0002\u0002",
    "\u0002`^\u0003\u0002\u0002\u0002ac\u0003\u0002\u0002\u0002b`\u0003\u0002",
    "\u0002\u0002cd\u0007,\u0002\u0002de\u00071\u0002\u0002ef\u0003\u0002",
    "\u0002\u0002fg\b\u0010\u0002\u0002g \u0003\u0002\u0002\u0002hj\t\u0005",
    "\u0002\u0002ih\u0003\u0002\u0002\u0002jk\u0003\u0002\u0002\u0002ki\u0003",
    "\u0002\u0002\u0002kl\u0003\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002",
    "mn\b\u0011\u0002\u0002n\"\u0003\u0002\u0002\u0002\t\u0002;AHS`k\u0003",
    "\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class regexLexer extends antlr4.Lexer {

    static grammarFileName = "regex.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'*'", "'+'", "'?'", "'{'", "':'", "'}'", 
                         "'.'", "'||'", "'('", "')'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, "NUMBER", "IDENTIFIER", "ATOM", 
                          "LINE_COMMENT", "COMMENT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "NUMBER", "IDENTIFIER", "ATOM", 
                      "LINE_COMMENT", "COMMENT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

regexLexer.EOF = antlr4.Token.EOF;
regexLexer.T__0 = 1;
regexLexer.T__1 = 2;
regexLexer.T__2 = 3;
regexLexer.T__3 = 4;
regexLexer.T__4 = 5;
regexLexer.T__5 = 6;
regexLexer.T__6 = 7;
regexLexer.T__7 = 8;
regexLexer.T__8 = 9;
regexLexer.T__9 = 10;
regexLexer.NUMBER = 11;
regexLexer.IDENTIFIER = 12;
regexLexer.ATOM = 13;
regexLexer.LINE_COMMENT = 14;
regexLexer.COMMENT = 15;
regexLexer.WS = 16;



